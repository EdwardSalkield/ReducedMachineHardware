module _WU #(parameter INSTR_BITS = 20) (input w_MS_DATA_INSTR_BITS, input w_MS_ZERO, input w_DPG, output [INSTR_BITS:0] w_ST_DATA_INSTR_BITS, output test);
	reg [$clog2(INSTR_BITS):0] counter;
	reg [INSTR_BITS-1:0] buffer;

	wire test;
	assign test = w_MS_ZERO;
	always @ (posedge w_DPG) begin
		//buffer[counter] = (w_MS_ZERO == 1) ? 0 : w_MS_DATA_INSTR_BITS;
		buffer[counter] = w_MS_DATA_INSTR_BITS;
		counter = (counter == INSTR_BITS-1) ? 0 : counter + 1;
	end

	assign w_ST_DATA_INSTR_BITS = buffer;
endmodule


module _RU #(parameter INSTR_BITS = 20) (input [INSTR_BITS-1:0] w_ST_DATA_OUT, input w_MS_ZERO, input w_DPG, output w_MS_DATA_OUT);
	reg [$clog2(INSTR_BITS):0] counter = 0;
	always @ (posedge w_DPG) begin
		w_MS_DATA_OUT <= (w_MS_ZERO) ? 0 : w_ST_DATA_OUT[counter];
		counter <= (counter == INSTR_BITS-1) ? 0 : counter + 1;
	end
endmodule


module _ST #(parameter INSTR_BITS = 20, parameter INSTR_ADDR_BITS = 10)
(input clk, input write, input[INSTR_ADDR_BITS-1:0] addr, input[INSTR_BITS-1:0] in_data, output[INSTR_BITS-1:0
] out_data);
	reg [INSTR_BITS-1:0] memorySpace [0:2**INSTR_ADDR_BITS-1];
	reg [INSTR_BITS-1:0] data_out_reg;

	always @ (posedge clk) begin
		if (write) begin
			memorySpace[addr] <= in_data;
			data_out_reg <= in_data;
		end
		else data_out_reg <= memorySpace[addr];
	end

	assign out_data = data_out_reg;
endmodule


module _MS #(parameter INSTR_BITS = 20, parameter INSTR_ADDR_BITS = 10)
(input [INSTR_ADDR_BITS-1:0] b_MS_ADDR, input w_XTB, input w_DPG, input w_MS_ZERO, input w_MS_DATA_IN, output w_MS_DATA_OUT, output [INSTR_BITS-1:0] datain, output [INSTR_BITS-1:0] datamem, output test);

	wire [INSTR_BITS-1:0] w_ST_DATA_IN;
	wire [INSTR_BITS-1:0] w_ST_DATA_OUT;
	wire w_MS_LOOPBACK;

	wire w_WU_DATA_IN;
	assign w_WU_DATA_IN = w_MS_DATA_IN | w_MS_LOOPBACK;

	_WU #(.INSTR_BITS(INSTR_BITS)) write_unit (w_WU_DATA_IN, w_MS_ZERO, w_DPG, w_ST_DATA_IN, test);
	_ST #(.INSTR_BITS(INSTR_BITS), .INSTR_ADDR_BITS(INSTR_ADDR_BITS)) storage_tube
		(w_DPG, w_XTB, b_MS_ADDR, w_ST_DATA_IN, w_ST_DATA_OUT);
	_RU #(.INSTR_BITS(INSTR_BITS)) read_unit (w_ST_DATA_OUT, w_MS_ZERO, w_DPG, w_MS_LOOPBACK);

	assign datain = w_ST_DATA_IN;
	assign datamem = w_ST_DATA_OUT;
	assign w_MS_DATA_OUT = w_MS_LOOPBACK;
endmodule
